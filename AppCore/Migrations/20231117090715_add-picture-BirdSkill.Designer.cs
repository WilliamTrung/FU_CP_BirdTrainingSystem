// <auto-generated />
using System;
using AppCore.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AppCore.Migrations
{
    [DbContext(typeof(BirdTrainingCenterSystemContext))]
    [Migration("20231117090715_add-picture-BirdSkill")]
    partial class addpictureBirdSkill
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.AcquirableSkill", b =>
                {
                    b.Property<int>("BirdSpeciesId")
                        .HasColumnType("integer");

                    b.Property<int>("BirdSkillId")
                        .HasColumnType("integer");

                    b.Property<string>("Condition")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("BirdSpeciesId", "BirdSkillId")
                        .HasName("PK__Acquirab__4802579EB257E655");

                    b.HasIndex("BirdSkillId");

                    b.ToTable("AcquirableSkill", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Bird", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BirdSpeciesId")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Picture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BirdSpeciesId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Bird", (string)null);
                });

            modelBuilder.Entity("Models.Entities.BirdCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BirdCenterName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Picture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShortDescrption")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("TrainingCourseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TrainingCourseId");

                    b.ToTable("BirdCertificate", (string)null);
                });

            modelBuilder.Entity("Models.Entities.BirdCertificateDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BirdCertificateId")
                        .HasColumnType("integer");

                    b.Property<int>("BirdId")
                        .HasColumnType("integer");

                    b.Property<int>("BirdTrainingCourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceiveDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("BirdCertificateId");

                    b.HasIndex("BirdId");

                    b.HasIndex("BirdTrainingCourseId");

                    b.ToTable("BirdCertificateDetail", (string)null);
                });

            modelBuilder.Entity("Models.Entities.BirdCertificateSkill", b =>
                {
                    b.Property<int>("BirdSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("BirdCertificateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("date");

                    b.HasKey("BirdSkillId", "BirdCertificateId")
                        .HasName("PK__BirdCert__A080D86A58420E37");

                    b.HasIndex("BirdCertificateId");

                    b.ToTable("BirdCertificateSkill", (string)null);
                });

            modelBuilder.Entity("Models.Entities.BirdSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Picture")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BirdSkill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Teaches controlled flight and landing",
                            Name = "Flight training"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Develops vocabulary and mimicking",
                            Name = "Speech training"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Modifies behaviors through positive reinforcement",
                            Name = "Behavior training"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Imitates noises like doorbells and phones",
                            Name = "Sound imitation"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Improves coordination through obstacle courses",
                            Name = "Agility training"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Identifies colors when named",
                            Name = "Color recognition"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Assumes specific poses on command",
                            Name = "Pose training"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Learns dance routines to music",
                            Name = "Choreographed dances"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Performs athletic tricks like hanging upside down",
                            Name = "Acrobatics"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Plays games like basketball or bowling",
                            Name = "Games"
                        });
                });

            modelBuilder.Entity("Models.Entities.BirdSkillReceived", b =>
                {
                    b.Property<int>("BirdSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("BirdId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("BirdSkillId", "BirdId");

                    b.HasIndex("BirdId");

                    b.ToTable("BirdSkillReceived", (string)null);
                });

            modelBuilder.Entity("Models.Entities.BirdSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ShortDetail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("BirdSpecies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Parakeet",
                            ShortDetail = "Small, colorful parakeets known for their friendly and social nature."
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cockatiel",
                            ShortDetail = "Medium-sized parrots that are easy to tame and often enjoy human interaction."
                        },
                        new
                        {
                            Id = 3,
                            Name = "Canary",
                            ShortDetail = "Small songbirds known for their melodious singing."
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lovebird",
                            ShortDetail = "Small parrots that are highly social and form strong bonds with their owners."
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cockatoo",
                            ShortDetail = "Large parrots known for their playful and affectionate personalities."
                        },
                        new
                        {
                            Id = 6,
                            Name = "Finch",
                            ShortDetail = "Small, active birds typically kept in aviaries or spacious cages."
                        },
                        new
                        {
                            Id = 7,
                            Name = "Canary-winged Parakeet",
                            ShortDetail = "Docile parakeets that are often considered good pets."
                        },
                        new
                        {
                            Id = 8,
                            Name = "Parrotlet",
                            ShortDetail = "Tiny parrots with big personalities, known for their inquisitive and playful behavior."
                        },
                        new
                        {
                            Id = 9,
                            Name = "Budgerigar (Budgie)",
                            ShortDetail = "Small parakeets that make excellent in-home pets, easy to care for and enjoy human interaction."
                        },
                        new
                        {
                            Id = 10,
                            Name = "Quaker Parrot (Monk Parakeet)",
                            ShortDetail = "Medium-sized parrots known for their social nature and ability to mimic words."
                        });
                });

            modelBuilder.Entity("Models.Entities.BirdTrainingCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BirdId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateReceived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateReturn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("money");

                    b.Property<string>("ReceiveNote")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReceivePicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ReceiveStaffId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RegisteredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReturnNote")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ReturnPicture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ReturnStaffId")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartTrainingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<int>("TrainingCourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TrainingDoneDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("BirdId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TrainingCourseId");

                    b.ToTable("Bird_TrainingCourse", (string)null);
                });

            modelBuilder.Entity("Models.Entities.BirdTrainingProgress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BirdTrainingCourseId")
                        .HasColumnType("integer")
                        .HasColumnName("Bird_TrainingCourseId");

                    b.Property<string>("Evidence")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTrainingSlot")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingCourseSkillId")
                        .HasColumnType("integer")
                        .HasColumnName("TrainingCourse_SkillId");

                    b.Property<DateTime?>("TrainingDoneDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("BirdTrainingCourseId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("TrainingCourseSkillId");

                    b.ToTable("Bird_TrainingProgress", (string)null);
                });

            modelBuilder.Entity("Models.Entities.BirdTrainingReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BirdTrainingProgressId")
                        .HasColumnType("integer")
                        .HasColumnName("Bird_TrainingProgressId");

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Evidence")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainerSlotId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BirdTrainingProgressId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("TrainerSlotId");

                    b.ToTable("BirdTrainingReport", (string)null);
                });

            modelBuilder.Entity("Models.Entities.CenterSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("SlotId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("CenterSlot", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BirdCenterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OnlineCourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Picture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShortDescrption")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("OnlineCourseId");

                    b.ToTable("Certificate", (string)null);
                });

            modelBuilder.Entity("Models.Entities.ConsultingPricePolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("OnlineOrOffline")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("ConsultingPricePolicy", (string)null);
                });

            modelBuilder.Entity("Models.Entities.ConsultingTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActualEndSlot")
                        .HasColumnType("integer");

                    b.Property<int>("ActualSlotStart")
                        .HasColumnType("integer");

                    b.Property<int?>("AddressId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("date");

                    b.Property<string>("ConsultingDetail")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ConsultingPricePolicyId")
                        .HasColumnType("integer");

                    b.Property<int>("ConsultingTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("money");

                    b.Property<int?>("Distance")
                        .HasColumnType("integer");

                    b.Property<int>("DistancePriceId")
                        .HasColumnType("integer");

                    b.Property<string>("Evidence")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("GgMeetLink")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("OnlineOrOffline")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ConsultingPricePolicyId");

                    b.HasIndex("ConsultingTypeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistancePriceId");

                    b.HasIndex("TrainerId");

                    b.ToTable("ConsultingTicket", (string)null);
                });

            modelBuilder.Entity("Models.Entities.ConsultingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("ConsultingType", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<int>("MembershipRankId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TotalPayment")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MembershipRankId");

                    b.HasIndex("UserId");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("Models.Entities.CustomerCertificateDetail", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("CertificateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReceiveDate")
                        .HasColumnType("date");

                    b.HasKey("CustomerId", "CertificateId")
                        .HasName("PK__Customer__AF11EEA4FDA02E2A");

                    b.HasIndex("CertificateId");

                    b.ToTable("Customer_CertificateDetail", (string)null);
                });

            modelBuilder.Entity("Models.Entities.CustomerLessonDetail", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("LessionId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("boolean");

                    b.HasKey("CustomerId", "LessionId")
                        .HasName("PK__Customer__304EA374D16199C5");

                    b.HasIndex("LessionId");

                    b.ToTable("Customer_LessonDetail", (string)null);
                });

            modelBuilder.Entity("Models.Entities.CustomerOnlineCourseDetail", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("OnlineCourseId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("money");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("CustomerId", "OnlineCourseId")
                        .HasName("PK__Customer__FFA1E3B76AF51E89");

                    b.HasIndex("OnlineCourseId");

                    b.ToTable("Customer_OnlineCourseDetail", (string)null);
                });

            modelBuilder.Entity("Models.Entities.CustomerSectionDetail", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("boolean");

                    b.HasKey("CustomerId", "SectionId")
                        .HasName("PK__Customer__9CA0945F8CBB2D34");

                    b.HasIndex("SectionId");

                    b.ToTable("Customer_SectionDetail", (string)null);
                });

            modelBuilder.Entity("Models.Entities.CustomerWorkshopClass", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkshopClassId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("money");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<float?>("RefundRate")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkshopRefundPolicyId")
                        .HasColumnType("integer");

                    b.HasKey("CustomerId", "WorkshopClassId")
                        .HasName("PK__Customer__7EEF8348DE684159");

                    b.HasIndex("WorkshopClassId");

                    b.HasIndex("WorkshopRefundPolicyId");

                    b.ToTable("Customer_WorkshopClass", (string)null);
                });

            modelBuilder.Entity("Models.Entities.DistancePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultingPricePolicyId")
                        .HasColumnType("integer");

                    b.Property<int?>("From")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PricePerKm")
                        .HasColumnType("money");

                    b.Property<int?>("To")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DistancePrice", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("FeedbackDetail")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Detail")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("SectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Video")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("Models.Entities.MembershipRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Discount")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("Requirement")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.ToTable("MembershipRank", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 0f,
                            Name = "Standard",
                            Requirement = 0m
                        },
                        new
                        {
                            Id = 2,
                            Discount = 0.1f,
                            Name = "Gold",
                            Requirement = 50000000m
                        },
                        new
                        {
                            Id = 3,
                            Discount = 0.2f,
                            Name = "Platinum",
                            Requirement = 100000000m
                        });
                });

            modelBuilder.Entity("Models.Entities.OnlineCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Picture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("OnlineCourse", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OnlineCourseId")
                        .HasColumnType("integer");

                    b.Property<string>("ResourceFiles")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("OnlineCourseId");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Skill", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Modifies bird behaviors through positive reinforcement",
                            Name = "Behavioral Training"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Develops bird speech and imitation abilities",
                            Name = "Vocal Training"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Prepares birds for stage performances",
                            Name = "Showmanship"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Teaches birds to chain multiple behaviors",
                            Name = "Complex Routines"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Provides proper bird nutrition, healthcare, etc.",
                            Name = "Husbandry"
                        });
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Slot", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new TimeSpan(0, 8, 45, 0, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndTime = new TimeSpan(0, 9, 45, 0, 0),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndTime = new TimeSpan(0, 10, 45, 0, 0),
                            StartTime = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            EndTime = new TimeSpan(0, 11, 45, 0, 0),
                            StartTime = new TimeSpan(0, 11, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            EndTime = new TimeSpan(0, 13, 45, 0, 0),
                            StartTime = new TimeSpan(0, 13, 0, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            EndTime = new TimeSpan(0, 14, 45, 0, 0),
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            EndTime = new TimeSpan(0, 15, 45, 0, 0),
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            EndTime = new TimeSpan(0, 16, 45, 0, 0),
                            StartTime = new TimeSpan(0, 16, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("Models.Entities.TrainableSkill", b =>
                {
                    b.Property<int>("BirdSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.HasKey("BirdSkillId", "SkillId")
                        .HasName("PK__Trainabl__707AE50061373685");

                    b.HasIndex("SkillId");

                    b.ToTable("TrainableSkill", (string)null);

                    b.HasData(
                        new
                        {
                            BirdSkillId = 3,
                            SkillId = 1,
                            ShortDescription = "Use positive reinforcement for behavior training"
                        },
                        new
                        {
                            BirdSkillId = 5,
                            SkillId = 1,
                            ShortDescription = "Build agility through positive reinforcement"
                        },
                        new
                        {
                            BirdSkillId = 2,
                            SkillId = 2,
                            ShortDescription = "Develop speech through vocal training"
                        },
                        new
                        {
                            BirdSkillId = 4,
                            SkillId = 2,
                            ShortDescription = "Imitate sounds through vocal training"
                        },
                        new
                        {
                            BirdSkillId = 8,
                            SkillId = 3,
                            ShortDescription = "Choreographed dances for shows"
                        },
                        new
                        {
                            BirdSkillId = 9,
                            SkillId = 3,
                            ShortDescription = "Acrobatic tricks for shows"
                        },
                        new
                        {
                            BirdSkillId = 10,
                            SkillId = 3,
                            ShortDescription = "Games and skits for shows"
                        },
                        new
                        {
                            BirdSkillId = 6,
                            SkillId = 4,
                            ShortDescription = "Chain behaviors for complex routines"
                        },
                        new
                        {
                            BirdSkillId = 7,
                            SkillId = 4,
                            ShortDescription = "Pose routines require chaining multiple behaviors"
                        },
                        new
                        {
                            BirdSkillId = 1,
                            SkillId = 5,
                            ShortDescription = "Proper flight training for exercise"
                        });
                });

            modelBuilder.Entity("Models.Entities.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("date");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<bool?>("Gender")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFullTime")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Trainer", (string)null);
                });

            modelBuilder.Entity("Models.Entities.TrainerSkill", b =>
                {
                    b.Property<int>("TrainerId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.HasKey("TrainerId", "SkillId")
                        .HasName("PK__Trainer___5B90136408FD50B7");

                    b.HasIndex("SkillId");

                    b.ToTable("Trainer_Skill", (string)null);
                });

            modelBuilder.Entity("Models.Entities.TrainerSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("SlotId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerSlot", (string)null);
                });

            modelBuilder.Entity("Models.Entities.TrainingCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BirdSpeciesId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Picture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("money");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BirdSpeciesId");

                    b.ToTable("TrainingCourse", (string)null);
                });

            modelBuilder.Entity("Models.Entities.TrainingCourseSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BirdSkillId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingCourseId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BirdSkillId");

                    b.HasIndex("TrainingCourseId");

                    b.ToTable("TrainingCourseSkill", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("date");

                    b.Property<string>("Detail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("integer");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("TotalPayment")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("PhoneNumber")
                        .HasColumnType("numeric(18,0)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__User__85FB4E386F560942")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__User__A9D10534EE377C20")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Workshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Picture")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int?>("RegisterEnd")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("character varying(300)");

                    b.Property<int>("TotalSlot")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Workshop", (string)null);
                });

            modelBuilder.Entity("Models.Entities.WorkshopAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("WorkshopClassDetailId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WorkshopClassDetailId");

                    b.ToTable("WorkshopAttendance", (string)null);
                });

            modelBuilder.Entity("Models.Entities.WorkshopClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RegisterEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("WorkshopClass", (string)null);
                });

            modelBuilder.Entity("Models.Entities.WorkshopClassDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DaySlotId")
                        .HasColumnType("integer");

                    b.Property<int>("DetailId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("date");

                    b.Property<int>("WorkshopClassId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DaySlotId");

                    b.HasIndex("DetailId");

                    b.HasIndex("WorkshopClassId");

                    b.ToTable("WorkshopClassDetail", (string)null);
                });

            modelBuilder.Entity("Models.Entities.WorkshopDetailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Detail")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("WorkshopDetailTemplate", (string)null);
                });

            modelBuilder.Entity("Models.Entities.WorkshopRefundPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("RefundRate")
                        .HasColumnType("real");

                    b.Property<int>("TotalDayBeforeStart")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WorkshopRefundPolicy", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RefundRate = 0f,
                            TotalDayBeforeStart = 13
                        },
                        new
                        {
                            Id = 2,
                            RefundRate = 0.5f,
                            TotalDayBeforeStart = 29
                        },
                        new
                        {
                            Id = 3,
                            RefundRate = 0.75f,
                            TotalDayBeforeStart = 30
                        },
                        new
                        {
                            Id = 4,
                            RefundRate = 1f,
                            TotalDayBeforeStart = -1
                        });
                });

            modelBuilder.Entity("Models.Entities.AcquirableSkill", b =>
                {
                    b.HasOne("Models.Entities.BirdSkill", "BirdSkill")
                        .WithMany("AcquirableSkills")
                        .HasForeignKey("BirdSkillId")
                        .IsRequired()
                        .HasConstraintName("FKAcquirable305826");

                    b.HasOne("Models.Entities.BirdSpecies", "BirdSpecies")
                        .WithMany("AcquirableSkills")
                        .HasForeignKey("BirdSpeciesId")
                        .IsRequired()
                        .HasConstraintName("FKAcquirable80836");

                    b.Navigation("BirdSkill");

                    b.Navigation("BirdSpecies");
                });

            modelBuilder.Entity("Models.Entities.Address", b =>
                {
                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKAddress64774");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.Bird", b =>
                {
                    b.HasOne("Models.Entities.BirdSpecies", "BirdSpecies")
                        .WithMany("Birds")
                        .HasForeignKey("BirdSpeciesId")
                        .IsRequired()
                        .HasConstraintName("FKBird650663");

                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("Birds")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKBird173768");

                    b.Navigation("BirdSpecies");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.BirdCertificate", b =>
                {
                    b.HasOne("Models.Entities.TrainingCourse", "TrainingCourse")
                        .WithMany("BirdCertificates")
                        .HasForeignKey("TrainingCourseId")
                        .IsRequired()
                        .HasConstraintName("FKBirdCertif231604");

                    b.Navigation("TrainingCourse");
                });

            modelBuilder.Entity("Models.Entities.BirdCertificateDetail", b =>
                {
                    b.HasOne("Models.Entities.BirdCertificate", "BirdCertificate")
                        .WithMany("BirdCertificateDetails")
                        .HasForeignKey("BirdCertificateId")
                        .IsRequired()
                        .HasConstraintName("FKBirdCertif464427");

                    b.HasOne("Models.Entities.Bird", "Bird")
                        .WithMany("BirdCertificateDetails")
                        .HasForeignKey("BirdId")
                        .IsRequired()
                        .HasConstraintName("FKBirdCertif999788");

                    b.HasOne("Models.Entities.BirdTrainingCourse", "BirdTrainingCourse")
                        .WithMany("BirdCertificateDetails")
                        .HasForeignKey("BirdTrainingCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bird");

                    b.Navigation("BirdCertificate");

                    b.Navigation("BirdTrainingCourse");
                });

            modelBuilder.Entity("Models.Entities.BirdCertificateSkill", b =>
                {
                    b.HasOne("Models.Entities.BirdCertificate", "BirdCertificate")
                        .WithMany("BirdCertificateSkills")
                        .HasForeignKey("BirdCertificateId")
                        .IsRequired()
                        .HasConstraintName("FKBirdCertif72357");

                    b.HasOne("Models.Entities.BirdSkill", "BirdSkill")
                        .WithMany("BirdCertificateSkills")
                        .HasForeignKey("BirdSkillId")
                        .IsRequired()
                        .HasConstraintName("FKBirdCertif163982");

                    b.Navigation("BirdCertificate");

                    b.Navigation("BirdSkill");
                });

            modelBuilder.Entity("Models.Entities.BirdSkillReceived", b =>
                {
                    b.HasOne("Models.Entities.Bird", "Bird")
                        .WithMany("BirdSkillReceiveds")
                        .HasForeignKey("BirdId")
                        .IsRequired();

                    b.HasOne("Models.Entities.BirdSkill", "BirdSkill")
                        .WithMany("BirdSkillReceiveds")
                        .HasForeignKey("BirdSkillId")
                        .IsRequired();

                    b.Navigation("Bird");

                    b.Navigation("BirdSkill");
                });

            modelBuilder.Entity("Models.Entities.BirdTrainingCourse", b =>
                {
                    b.HasOne("Models.Entities.Bird", "Bird")
                        .WithMany("BirdTrainingCourses")
                        .HasForeignKey("BirdId")
                        .IsRequired()
                        .HasConstraintName("FKBird_Train718139");

                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("BirdTrainingCourses")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKBird_Train678526");

                    b.HasOne("Models.Entities.User", "Staff")
                        .WithMany("BirdTrainingCourses")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FKBird_Train934485");

                    b.HasOne("Models.Entities.TrainingCourse", "TrainingCourse")
                        .WithMany("BirdTrainingCourses")
                        .HasForeignKey("TrainingCourseId")
                        .IsRequired()
                        .HasConstraintName("FKBird_Train368802");

                    b.Navigation("Bird");

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("TrainingCourse");
                });

            modelBuilder.Entity("Models.Entities.BirdTrainingProgress", b =>
                {
                    b.HasOne("Models.Entities.BirdTrainingCourse", "BirdTrainingCourse")
                        .WithMany("BirdTrainingProgresses")
                        .HasForeignKey("BirdTrainingCourseId")
                        .IsRequired()
                        .HasConstraintName("FKBird_Train409415");

                    b.HasOne("Models.Entities.Trainer", "Trainer")
                        .WithMany("BirdTrainingProgresses")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FKBird_Train934988");

                    b.HasOne("Models.Entities.TrainingCourseSkill", "TrainingCourseSkill")
                        .WithMany("BirdTrainingProgresses")
                        .HasForeignKey("TrainingCourseSkillId")
                        .IsRequired();

                    b.Navigation("BirdTrainingCourse");

                    b.Navigation("Trainer");

                    b.Navigation("TrainingCourseSkill");
                });

            modelBuilder.Entity("Models.Entities.BirdTrainingReport", b =>
                {
                    b.HasOne("Models.Entities.BirdTrainingProgress", "BirdTrainingProgress")
                        .WithMany("BirdTrainingReports")
                        .HasForeignKey("BirdTrainingProgressId")
                        .IsRequired()
                        .HasConstraintName("FKBirdTraini259515");

                    b.HasOne("Models.Entities.Trainer", "Trainer")
                        .WithMany("BirdTrainingReports")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.TrainerSlot", "TrainerSlot")
                        .WithMany("BirdTrainingReports")
                        .HasForeignKey("TrainerSlotId")
                        .IsRequired()
                        .HasConstraintName("FKBirdTraini696869");

                    b.Navigation("BirdTrainingProgress");

                    b.Navigation("Trainer");

                    b.Navigation("TrainerSlot");
                });

            modelBuilder.Entity("Models.Entities.CenterSlot", b =>
                {
                    b.HasOne("Models.Entities.Slot", "Slot")
                        .WithMany("CenterSlots")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FKCenterSlot412931");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.HasOne("Models.Entities.OnlineCourse", "OnlineCourse")
                        .WithMany("Certificates")
                        .HasForeignKey("OnlineCourseId")
                        .IsRequired()
                        .HasConstraintName("FKCertificat555329");

                    b.Navigation("OnlineCourse");
                });

            modelBuilder.Entity("Models.Entities.ConsultingTicket", b =>
                {
                    b.HasOne("Models.Entities.Address", "Address")
                        .WithMany("ConsultingTickets")
                        .HasForeignKey("AddressId")
                        .IsRequired()
                        .HasConstraintName("FKConsulting220553");

                    b.HasOne("Models.Entities.ConsultingPricePolicy", "ConsultingPricePolicy")
                        .WithMany("ConsultingTickets")
                        .HasForeignKey("ConsultingPricePolicyId")
                        .IsRequired()
                        .HasConstraintName("FKConsulting196354");

                    b.HasOne("Models.Entities.ConsultingType", "ConsultingType")
                        .WithMany("ConsultingTickets")
                        .HasForeignKey("ConsultingTypeId")
                        .IsRequired()
                        .HasConstraintName("FKConsulting521439");

                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("ConsultingTickets")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKConsulting154539");

                    b.HasOne("Models.Entities.DistancePrice", "DistancePrice")
                        .WithMany("ConsultingTickets")
                        .HasForeignKey("DistancePriceId")
                        .IsRequired()
                        .HasConstraintName("FKConsulting564465");

                    b.HasOne("Models.Entities.Trainer", "Trainer")
                        .WithMany("ConsultingTickets")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FKConsulting31098");

                    b.Navigation("Address");

                    b.Navigation("ConsultingPricePolicy");

                    b.Navigation("ConsultingType");

                    b.Navigation("Customer");

                    b.Navigation("DistancePrice");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.Customer", b =>
                {
                    b.HasOne("Models.Entities.MembershipRank", "MembershipRank")
                        .WithMany("Customers")
                        .HasForeignKey("MembershipRankId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer774542");

                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer697132");

                    b.Navigation("MembershipRank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.CustomerCertificateDetail", b =>
                {
                    b.HasOne("Models.Entities.Certificate", "Certificate")
                        .WithMany("CustomerCertificateDetails")
                        .HasForeignKey("CertificateId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_C508581");

                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("CustomerCertificateDetails")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_C859755");

                    b.Navigation("Certificate");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.CustomerLessonDetail", b =>
                {
                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("CustomerLessonDetails")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_L809461");

                    b.HasOne("Models.Entities.Lesson", "Lession")
                        .WithMany("CustomerLessonDetails")
                        .HasForeignKey("LessionId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_L582869");

                    b.Navigation("Customer");

                    b.Navigation("Lession");
                });

            modelBuilder.Entity("Models.Entities.CustomerOnlineCourseDetail", b =>
                {
                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("CustomerOnlineCourseDetails")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_O139976");

                    b.HasOne("Models.Entities.OnlineCourse", "OnlineCourse")
                        .WithMany("CustomerOnlineCourseDetails")
                        .HasForeignKey("OnlineCourseId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_O181189");

                    b.Navigation("Customer");

                    b.Navigation("OnlineCourse");
                });

            modelBuilder.Entity("Models.Entities.CustomerSectionDetail", b =>
                {
                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("CustomerSectionDetails")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_S58540");

                    b.HasOne("Models.Entities.Section", "Section")
                        .WithMany("CustomerSectionDetails")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_S977222");

                    b.Navigation("Customer");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Models.Entities.CustomerWorkshopClass", b =>
                {
                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("CustomerWorkshopClasses")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_W416862");

                    b.HasOne("Models.Entities.WorkshopClass", "WorkshopClass")
                        .WithMany("CustomerWorkshopClasses")
                        .HasForeignKey("WorkshopClassId")
                        .IsRequired()
                        .HasConstraintName("FKCustomer_W257990");

                    b.HasOne("Models.Entities.WorkshopRefundPolicy", "WorkshopRefundPolicy")
                        .WithMany("CustomerWorkshopClasses")
                        .HasForeignKey("WorkshopRefundPolicyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("WorkshopClass");

                    b.Navigation("WorkshopRefundPolicy");
                });

            modelBuilder.Entity("Models.Entities.Feedback", b =>
                {
                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKFeedback245587");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.HasOne("Models.Entities.Section", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("SectionId")
                        .IsRequired()
                        .HasConstraintName("FKLesson170997");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Models.Entities.Section", b =>
                {
                    b.HasOne("Models.Entities.OnlineCourse", "OnlineCourse")
                        .WithMany("Sections")
                        .HasForeignKey("OnlineCourseId")
                        .IsRequired()
                        .HasConstraintName("FKSection929188");

                    b.Navigation("OnlineCourse");
                });

            modelBuilder.Entity("Models.Entities.TrainableSkill", b =>
                {
                    b.HasOne("Models.Entities.BirdSkill", "BirdSkill")
                        .WithMany("TrainableSkills")
                        .HasForeignKey("BirdSkillId")
                        .IsRequired()
                        .HasConstraintName("FKTrainableS485101");

                    b.HasOne("Models.Entities.Skill", "Skill")
                        .WithMany("TrainableSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FKTrainableS574420");

                    b.Navigation("BirdSkill");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Models.Entities.Trainer", b =>
                {
                    b.HasOne("Models.Entities.User", "User")
                        .WithMany("Trainers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FKTrainer76895");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.Entities.TrainerSkill", b =>
                {
                    b.HasOne("Models.Entities.Skill", "Skill")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FKTrainer_Sk368940");

                    b.HasOne("Models.Entities.Trainer", "Trainer")
                        .WithMany("TrainerSkills")
                        .HasForeignKey("TrainerId")
                        .IsRequired()
                        .HasConstraintName("FKTrainer_Sk733170");

                    b.Navigation("Skill");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainerSlot", b =>
                {
                    b.HasOne("Models.Entities.Slot", "Slot")
                        .WithMany("TrainerSlots")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FKTrainerSlo833189");

                    b.HasOne("Models.Entities.Trainer", "Trainer")
                        .WithMany("TrainerSlots")
                        .HasForeignKey("TrainerId")
                        .HasConstraintName("FKTrainerSlo815026");

                    b.Navigation("Slot");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Models.Entities.TrainingCourse", b =>
                {
                    b.HasOne("Models.Entities.BirdSpecies", "BirdSpecies")
                        .WithMany("TrainingCourses")
                        .HasForeignKey("BirdSpeciesId")
                        .IsRequired()
                        .HasConstraintName("FKTrainingCo245376");

                    b.Navigation("BirdSpecies");
                });

            modelBuilder.Entity("Models.Entities.TrainingCourseSkill", b =>
                {
                    b.HasOne("Models.Entities.BirdSkill", "BirdSkill")
                        .WithMany("TrainingCourseSkills")
                        .HasForeignKey("BirdSkillId")
                        .IsRequired();

                    b.HasOne("Models.Entities.TrainingCourse", "TrainingCourse")
                        .WithMany("TrainingCourseSkills")
                        .HasForeignKey("TrainingCourseId")
                        .IsRequired();

                    b.Navigation("BirdSkill");

                    b.Navigation("TrainingCourse");
                });

            modelBuilder.Entity("Models.Entities.Transaction", b =>
                {
                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKTransactio250053");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Models.Entities.WorkshopAttendance", b =>
                {
                    b.HasOne("Models.Entities.Customer", "Customer")
                        .WithMany("WorkshopAttendances")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FKWorkshopAt124181");

                    b.HasOne("Models.Entities.WorkshopClassDetail", "WorkshopClassDetail")
                        .WithMany("WorkshopAttendances")
                        .HasForeignKey("WorkshopClassDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("WorkshopClassDetail");
                });

            modelBuilder.Entity("Models.Entities.WorkshopClass", b =>
                {
                    b.HasOne("Models.Entities.Workshop", "Workshop")
                        .WithMany("WorkshopClasses")
                        .HasForeignKey("WorkshopId")
                        .IsRequired()
                        .HasConstraintName("FKWorkshopCl950556");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Models.Entities.WorkshopClassDetail", b =>
                {
                    b.HasOne("Models.Entities.TrainerSlot", "DaySlot")
                        .WithMany("WorkshopClassDetails")
                        .HasForeignKey("DaySlotId")
                        .HasConstraintName("FKWorkshopCl382995");

                    b.HasOne("Models.Entities.WorkshopDetailTemplate", "WorkshopDetailTemplate")
                        .WithMany("WorkshopClassDetails")
                        .HasForeignKey("DetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FKWorkshopCl957106");

                    b.HasOne("Models.Entities.WorkshopClass", "WorkshopClass")
                        .WithMany("WorkshopClassDetails")
                        .HasForeignKey("WorkshopClassId")
                        .IsRequired()
                        .HasConstraintName("FKWorkshopCl141743");

                    b.Navigation("DaySlot");

                    b.Navigation("WorkshopClass");

                    b.Navigation("WorkshopDetailTemplate");
                });

            modelBuilder.Entity("Models.Entities.WorkshopDetailTemplate", b =>
                {
                    b.HasOne("Models.Entities.Workshop", "Workshop")
                        .WithMany("WorkshopDetailTemplates")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Models.Entities.Address", b =>
                {
                    b.Navigation("ConsultingTickets");
                });

            modelBuilder.Entity("Models.Entities.Bird", b =>
                {
                    b.Navigation("BirdCertificateDetails");

                    b.Navigation("BirdSkillReceiveds");

                    b.Navigation("BirdTrainingCourses");
                });

            modelBuilder.Entity("Models.Entities.BirdCertificate", b =>
                {
                    b.Navigation("BirdCertificateDetails");

                    b.Navigation("BirdCertificateSkills");
                });

            modelBuilder.Entity("Models.Entities.BirdSkill", b =>
                {
                    b.Navigation("AcquirableSkills");

                    b.Navigation("BirdCertificateSkills");

                    b.Navigation("BirdSkillReceiveds");

                    b.Navigation("TrainableSkills");

                    b.Navigation("TrainingCourseSkills");
                });

            modelBuilder.Entity("Models.Entities.BirdSpecies", b =>
                {
                    b.Navigation("AcquirableSkills");

                    b.Navigation("Birds");

                    b.Navigation("TrainingCourses");
                });

            modelBuilder.Entity("Models.Entities.BirdTrainingCourse", b =>
                {
                    b.Navigation("BirdCertificateDetails");

                    b.Navigation("BirdTrainingProgresses");
                });

            modelBuilder.Entity("Models.Entities.BirdTrainingProgress", b =>
                {
                    b.Navigation("BirdTrainingReports");
                });

            modelBuilder.Entity("Models.Entities.Certificate", b =>
                {
                    b.Navigation("CustomerCertificateDetails");
                });

            modelBuilder.Entity("Models.Entities.ConsultingPricePolicy", b =>
                {
                    b.Navigation("ConsultingTickets");
                });

            modelBuilder.Entity("Models.Entities.ConsultingType", b =>
                {
                    b.Navigation("ConsultingTickets");
                });

            modelBuilder.Entity("Models.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("BirdTrainingCourses");

                    b.Navigation("Birds");

                    b.Navigation("ConsultingTickets");

                    b.Navigation("CustomerCertificateDetails");

                    b.Navigation("CustomerLessonDetails");

                    b.Navigation("CustomerOnlineCourseDetails");

                    b.Navigation("CustomerSectionDetails");

                    b.Navigation("CustomerWorkshopClasses");

                    b.Navigation("Feedbacks");

                    b.Navigation("Transactions");

                    b.Navigation("WorkshopAttendances");
                });

            modelBuilder.Entity("Models.Entities.DistancePrice", b =>
                {
                    b.Navigation("ConsultingTickets");
                });

            modelBuilder.Entity("Models.Entities.Lesson", b =>
                {
                    b.Navigation("CustomerLessonDetails");
                });

            modelBuilder.Entity("Models.Entities.MembershipRank", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Models.Entities.OnlineCourse", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("CustomerOnlineCourseDetails");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Models.Entities.Section", b =>
                {
                    b.Navigation("CustomerSectionDetails");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Models.Entities.Skill", b =>
                {
                    b.Navigation("TrainableSkills");

                    b.Navigation("TrainerSkills");
                });

            modelBuilder.Entity("Models.Entities.Slot", b =>
                {
                    b.Navigation("CenterSlots");

                    b.Navigation("TrainerSlots");
                });

            modelBuilder.Entity("Models.Entities.Trainer", b =>
                {
                    b.Navigation("BirdTrainingProgresses");

                    b.Navigation("BirdTrainingReports");

                    b.Navigation("ConsultingTickets");

                    b.Navigation("TrainerSkills");

                    b.Navigation("TrainerSlots");
                });

            modelBuilder.Entity("Models.Entities.TrainerSlot", b =>
                {
                    b.Navigation("BirdTrainingReports");

                    b.Navigation("WorkshopClassDetails");
                });

            modelBuilder.Entity("Models.Entities.TrainingCourse", b =>
                {
                    b.Navigation("BirdCertificates");

                    b.Navigation("BirdTrainingCourses");

                    b.Navigation("TrainingCourseSkills");
                });

            modelBuilder.Entity("Models.Entities.TrainingCourseSkill", b =>
                {
                    b.Navigation("BirdTrainingProgresses");
                });

            modelBuilder.Entity("Models.Entities.User", b =>
                {
                    b.Navigation("BirdTrainingCourses");

                    b.Navigation("Customers");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Models.Entities.Workshop", b =>
                {
                    b.Navigation("WorkshopClasses");

                    b.Navigation("WorkshopDetailTemplates");
                });

            modelBuilder.Entity("Models.Entities.WorkshopClass", b =>
                {
                    b.Navigation("CustomerWorkshopClasses");

                    b.Navigation("WorkshopClassDetails");
                });

            modelBuilder.Entity("Models.Entities.WorkshopClassDetail", b =>
                {
                    b.Navigation("WorkshopAttendances");
                });

            modelBuilder.Entity("Models.Entities.WorkshopDetailTemplate", b =>
                {
                    b.Navigation("WorkshopClassDetails");
                });

            modelBuilder.Entity("Models.Entities.WorkshopRefundPolicy", b =>
                {
                    b.Navigation("CustomerWorkshopClasses");
                });
#pragma warning restore 612, 618
        }
    }
}
